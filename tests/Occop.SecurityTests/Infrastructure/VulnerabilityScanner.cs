using Occop.Core.Security;

namespace Occop.SecurityTests.Infrastructure
{
    /// <summary>
    /// 安全漏洞扫描器，用于检测常见的安全问题
    /// Security vulnerability scanner for detecting common security issues
    /// </summary>
    public class VulnerabilityScanner
    {
        private readonly SensitiveDataScanner _sensitiveDataScanner;
        private readonly List<VulnerabilityRule> _rules;

        /// <summary>
        /// 初始化漏洞扫描器
        /// Initializes vulnerability scanner
        /// </summary>
        public VulnerabilityScanner()
        {
            _sensitiveDataScanner = new SensitiveDataScanner();
            _rules = new List<VulnerabilityRule>();
            InitializeDefaultRules();
        }

        /// <summary>
        /// 初始化默认扫描规则
        /// Initializes default scan rules
        /// </summary>
        private void InitializeDefaultRules()
        {
            // 输入验证漏洞
            AddRule(new VulnerabilityRule
            {
                Id = "INJ-001",
                Name = "SQL Injection Pattern",
                Severity = VulnerabilitySeverity.Critical,
                Pattern = @"(?i)(union.*select|insert.*into|delete.*from|drop.*table|exec.*\(|execute.*\()",
                Description = "Potential SQL injection vulnerability detected"
            });

            AddRule(new VulnerabilityRule
            {
                Id = "INJ-002",
                Name = "Command Injection Pattern",
                Severity = VulnerabilitySeverity.Critical,
                Pattern = @"(?i)(;.*rm\s|;.*del\s|&&.*cmd|`.*whoami|\|.*bash)",
                Description = "Potential command injection vulnerability detected"
            });

            AddRule(new VulnerabilityRule
            {
                Id = "INJ-003",
                Name = "Path Traversal Pattern",
                Severity = VulnerabilitySeverity.High,
                Pattern = @"(\.\./|\.\.\\|%2e%2e/|%2e%2e\\)",
                Description = "Potential path traversal vulnerability detected"
            });

            // XSS漏洞
            AddRule(new VulnerabilityRule
            {
                Id = "XSS-001",
                Name = "Cross-Site Scripting Pattern",
                Severity = VulnerabilitySeverity.High,
                Pattern = @"(?i)(<script.*>|javascript:|onerror=|onload=|eval\()",
                Description = "Potential XSS vulnerability detected"
            });

            // 不安全的加密
            AddRule(new VulnerabilityRule
            {
                Id = "CRYPTO-001",
                Name = "Weak Encryption Algorithm",
                Severity = VulnerabilitySeverity.High,
                Pattern = @"(?i)(DES|MD5|SHA1)(?!.*HMAC)",
                Description = "Use of weak cryptographic algorithm detected"
            });

            // 硬编码凭据
            AddRule(new VulnerabilityRule
            {
                Id = "CRED-001",
                Name = "Hardcoded Credentials",
                Severity = VulnerabilitySeverity.Critical,
                Pattern = @"(?i)(password\s*=\s*[""'][^""']+[""']|api[_-]?key\s*=\s*[""'][^""']+[""'])",
                Description = "Hardcoded credentials detected"
            });

            // 不安全的反序列化
            AddRule(new VulnerabilityRule
            {
                Id = "DESER-001",
                Name = "Insecure Deserialization",
                Severity = VulnerabilitySeverity.High,
                Pattern = @"(?i)(BinaryFormatter|ObjectStateFormatter|LosFormatter)\.Deserialize",
                Description = "Potentially insecure deserialization detected"
            });

            // 未加密的敏感数据传输
            AddRule(new VulnerabilityRule
            {
                Id = "TRANS-001",
                Name = "Unencrypted Data Transmission",
                Severity = VulnerabilitySeverity.Medium,
                Pattern = @"(?i)(http://.*password|http://.*token|http://.*secret)",
                Description = "Unencrypted transmission of sensitive data detected"
            });
        }

        /// <summary>
        /// 添加自定义扫描规则
        /// Adds custom scan rule
        /// </summary>
        public void AddRule(VulnerabilityRule rule)
        {
            _rules.Add(rule);
        }

        /// <summary>
        /// 扫描代码漏洞
        /// Scans code for vulnerabilities
        /// </summary>
        public VulnerabilityScanResult ScanCode(string code, string source = "unknown")
        {
            var result = new VulnerabilityScanResult
            {
                Source = source,
                ScanTime = DateTime.UtcNow,
                Vulnerabilities = new List<Vulnerability>()
            };

            // 检查模式匹配
            foreach (var rule in _rules)
            {
                var regex = new System.Text.RegularExpressions.Regex(
                    rule.Pattern,
                    System.Text.RegularExpressions.RegexOptions.Multiline,
                    TimeSpan.FromMilliseconds(100)
                );

                try
                {
                    var matches = regex.Matches(code);
                    foreach (System.Text.RegularExpressions.Match match in matches)
                    {
                        result.Vulnerabilities.Add(new Vulnerability
                        {
                            RuleId = rule.Id,
                            Name = rule.Name,
                            Severity = rule.Severity,
                            Description = rule.Description,
                            Location = match.Index,
                            Evidence = GetContext(code, match.Index, match.Length)
                        });
                    }
                }
                catch (System.Text.RegularExpressions.RegexMatchTimeoutException)
                {
                    continue;
                }
            }

            // 检查敏感数据泄露
            var sensitiveDataResult = _sensitiveDataScanner.ScanText(code, source);
            if (sensitiveDataResult.ContainsSensitiveData)
            {
                foreach (var finding in sensitiveDataResult.Findings)
                {
                    result.Vulnerabilities.Add(new Vulnerability
                    {
                        RuleId = "LEAK-001",
                        Name = $"Sensitive Data Exposure: {finding.Type}",
                        Severity = MapSensitivityToSeverity(finding.Level),
                        Description = $"Sensitive {finding.Type} detected in code",
                        Location = finding.Position,
                        Evidence = finding.Context
                    });
                }
            }

            result.CriticalCount = result.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Critical);
            result.HighCount = result.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.High);
            result.MediumCount = result.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Medium);
            result.LowCount = result.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.Low);

            return result;
        }

        /// <summary>
        /// 扫描文件漏洞
        /// Scans file for vulnerabilities
        /// </summary>
        public async Task<VulnerabilityScanResult> ScanFileAsync(string filePath)
        {
            if (!File.Exists(filePath))
                throw new FileNotFoundException($"File not found: {filePath}");

            var code = await File.ReadAllTextAsync(filePath);
            return ScanCode(code, filePath);
        }

        /// <summary>
        /// 扫描目录漏洞
        /// Scans directory for vulnerabilities
        /// </summary>
        public async Task<List<VulnerabilityScanResult>> ScanDirectoryAsync(
            string directoryPath,
            string searchPattern = "*.cs")
        {
            var results = new List<VulnerabilityScanResult>();

            if (!Directory.Exists(directoryPath))
                throw new DirectoryNotFoundException($"Directory not found: {directoryPath}");

            var files = Directory.GetFiles(directoryPath, searchPattern, SearchOption.AllDirectories);

            foreach (var file in files)
            {
                try
                {
                    var result = await ScanFileAsync(file);
                    if (result.Vulnerabilities.Any())
                        results.Add(result);
                }
                catch (Exception ex)
                {
                    results.Add(new VulnerabilityScanResult
                    {
                        Source = file,
                        ScanTime = DateTime.UtcNow,
                        Error = ex.Message
                    });
                }
            }

            return results;
        }

        /// <summary>
        /// 生成漏洞报告
        /// Generates vulnerability report
        /// </summary>
        public VulnerabilityReport GenerateReport(List<VulnerabilityScanResult> results)
        {
            return new VulnerabilityReport
            {
                TotalScans = results.Count,
                FilesWithVulnerabilities = results.Count(r => r.Vulnerabilities.Any()),
                TotalVulnerabilities = results.Sum(r => r.Vulnerabilities.Count),
                CriticalVulnerabilities = results.Sum(r => r.CriticalCount),
                HighVulnerabilities = results.Sum(r => r.HighCount),
                MediumVulnerabilities = results.Sum(r => r.MediumCount),
                LowVulnerabilities = results.Sum(r => r.LowCount),
                Results = results,
                GeneratedAt = DateTime.UtcNow,
                IsSecure = !results.Any(r => r.Vulnerabilities.Any())
            };
        }

        /// <summary>
        /// 获取上下文
        /// Gets context
        /// </summary>
        private string GetContext(string text, int position, int length, int contextSize = 30)
        {
            var start = Math.Max(0, position - contextSize);
            var end = Math.Min(text.Length, position + length + contextSize);
            return text.Substring(start, end - start).Replace("\n", " ");
        }

        /// <summary>
        /// 映射敏感级别到漏洞严重性
        /// Maps sensitivity level to vulnerability severity
        /// </summary>
        private VulnerabilitySeverity MapSensitivityToSeverity(SensitivityLevel level)
        {
            return level switch
            {
                SensitivityLevel.Critical => VulnerabilitySeverity.Critical,
                SensitivityLevel.High => VulnerabilitySeverity.High,
                SensitivityLevel.Medium => VulnerabilitySeverity.Medium,
                _ => VulnerabilitySeverity.Low
            };
        }
    }

    /// <summary>
    /// 漏洞扫描规则
    /// Vulnerability scan rule
    /// </summary>
    public class VulnerabilityRule
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public VulnerabilitySeverity Severity { get; set; }
        public string Pattern { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    /// <summary>
    /// 漏洞
    /// Vulnerability
    /// </summary>
    public class Vulnerability
    {
        public string RuleId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public VulnerabilitySeverity Severity { get; set; }
        public string Description { get; set; } = string.Empty;
        public int Location { get; set; }
        public string Evidence { get; set; } = string.Empty;
    }

    /// <summary>
    /// 漏洞扫描结果
    /// Vulnerability scan result
    /// </summary>
    public class VulnerabilityScanResult
    {
        public string Source { get; set; } = string.Empty;
        public DateTime ScanTime { get; set; }
        public List<Vulnerability> Vulnerabilities { get; set; } = new();
        public int CriticalCount { get; set; }
        public int HighCount { get; set; }
        public int MediumCount { get; set; }
        public int LowCount { get; set; }
        public string? Error { get; set; }
    }

    /// <summary>
    /// 漏洞报告
    /// Vulnerability report
    /// </summary>
    public class VulnerabilityReport
    {
        public int TotalScans { get; set; }
        public int FilesWithVulnerabilities { get; set; }
        public int TotalVulnerabilities { get; set; }
        public int CriticalVulnerabilities { get; set; }
        public int HighVulnerabilities { get; set; }
        public int MediumVulnerabilities { get; set; }
        public int LowVulnerabilities { get; set; }
        public List<VulnerabilityScanResult> Results { get; set; } = new();
        public DateTime GeneratedAt { get; set; }
        public bool IsSecure { get; set; }
    }

    /// <summary>
    /// 漏洞严重性
    /// Vulnerability severity
    /// </summary>
    public enum VulnerabilitySeverity
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Critical = 3
    }
}
